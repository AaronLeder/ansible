---
- name: Elastic files to be backed up
  ansible.builtin.set_fact:
    bkp_elastic_files:
      - { path: "/etc/elasticsearch", file: "elasticsearch.yml" }
      - { path: "/etc/elasticsearch", file: "elasticsearch.keystore"}
    bkp_kibana_files:
      - { path: "/etc/kibana", file: "kibana.yml" }
      - { path: "/etc/kibana", file: "kibana.keystore" }
    bkp_logstash_files:
      - { path: "/etc/logstash", file: "logstash.yml" }
      - { path: "/etc/logstash", file: "logstash.keystore" }
      - { path: "/etc/logstash", file: "pipelines.yml" }
      - { path: "/etc/logstash", file: "logstash_conf.tar.gz" }

- name: Create backup directory for hosts
  ansible.builtin.file:
    path: "{{ backup_location_elastic }}"
    state: directory
    owner: admin
    group: admin
    mode: '0700'
  delegate_to: localhost

# ===== Elastic ===== #
- name: Backup Elastic files
  when: inventory_hostname in groups["elasticsearch"]
  block: 
    - name: See if required files exist (Elastic)
      ansible.builtin.stat: 
        path: "{{ item.path }}/{{ item.file }}"
      loop: "{{ bkp_elastic_files }}"
      loop_control:
        label: "{{ item.path }}/{{ item.file }}"
      register: elastic_bkp_stat
    
    - name: Build list of existing files (Elastic)
      ansible.builtin.set_fact:
        existing_elastic: >-
          {{
            elastic_bkp_stat.results | default([]) |
            selectattr('stat.exists') |
            map(attribute='stat.path') | list
          }}

    - name: Fetch files from remote hosts (Elastic)
      ansible.builtin.fetch:
        src: "{{ item }}"
        dest: "{{ backup_location_elastic }}"
        flat: true
      loop: "{{ existing_elastic | default([]) }}"
      loop_control:
        label: "{{ item }}"

# ===== Kibana ===== #
- name: Backup Kibana files
  when: inventory_hostname in groups.get('kibana', [])
  block:
    - name: See if required files exist (Kibana)
      ansible.builtin.stat:
        path: "{{ item.path }}/{{ item.file }}"
      loop: "{{ bkp_kibana_files }}"
      loop_control:
        label: "{{ item.path }}/{{ item.file }}"
      register: kibana_bkp_stat

    - name: Build list of existing files (Kibana)
      ansible.builtin.set_fact:
        existing_kibana: >-
          {{
            kibana_bkp_stat.results | default([]) |
            selectattr('stat.exists') |
            map(attribute='stat.path') | list
          }}

    - name: Fetch files from remote hosts (Kibana)
      ansible.builtin.fetch:
        src: "{{ item }}"
        dest: "{{ backup_location_elastic }}"
        flat: true
      loop: "{{ existing_kibana | default([]) }}"
      loop_control:
        label: "{{ item }}"

# ===== Logstash ===== #
- name: Backup Logstash files
  when: inventory_hostname in groups["logstash"]
  block: 
    - name: Tarball Logstash conf.d
      community.general.archive:
        path: /etc/logstash/conf.d/
        dest: /etc/logstash/logstash_conf.tar.gz

    - name: See if required files exist (Logstash)
      ansible.builtin.stat: 
        path: "{{ item.path }}/{{ item.file }}"
      loop: "{{ bkp_logstash_files }}"
      loop_control:
        label: "{{ item.path }}/{{ item.file }}"
      register: logstash_bkp_stat

    - name: Build list of existing files (Logstash)
      ansible.builtin.set_fact:
        existing_logstash: >-
          {{
            logstash_bkp_stat.results | default([]) |
            selectattr('stat.exists') |
            map(attribute='stat.path') | list
          }}

    - name: Fetch files from remote hosts (Logstash)
      ansible.builtin.fetch:
        src: "{{ item }}"
        dest: "{{ backup_location_elastic }}"
        flat: true
      loop: "{{ existing_logstash | default([]) }}"
      loop_control:
        label: "{{ item }}"

    - name: Clean up Logstash conf.d tar ball
      ansible.builtin.file: 
        path: /etc/logstash/logstash_conf.tar.gz
        state: absent
